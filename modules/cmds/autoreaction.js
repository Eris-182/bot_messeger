'use strict';

export const config = {
    name: 'autoreaction',
    version: '1.0.0',
    role: 0,
    author: ['Sky'],
    viDesc: 'Auto th·∫£ c·∫£m x√∫c v√†o tin nh·∫Øn',
    enDesc: 'Auto reaction to message',
    category: ['H·ªó tr·ª£', 'Support'],
    usages: '',
    timestamp: 5
}

export const languages = {
    "vi_VN": {
        "on": "„ÄâB·∫≠t",
        "off": "„ÄâT·∫Øt",
        "successText": "th√†nh c√¥ng event t·ª± ƒë·ªông th·∫£ reaction"
    },
    "en_US": {
        "on": "„ÄâOn",
        "off": "„ÄâOff",
        "successText": "success event auto reaction"
    }
}

export async function onEvent({ event, api, Threads }) {
    const { data } = await Threads.getData(event.threadID) || global.data.allThreadData[event.threadID] || {};
    if (data && data['autoDownload'] != true) return;
    if (event.senderID == api.getCurrentUserID()) return;
    if (!event.body || event.type == "message_reaction") return;

    setTimeout(() => {
        if (['Kh√πng', 'Ng√°o', 'ƒëi√™n'].some(i => event.body ? event.body.includes(i) : '')) return api.setMessageReaction('üëÄ', event.messageID, false, true);
        if (['Haha', 'C∆∞·ªùi', 'Hihi', 'üòÇ', 'ü§£', ':))', ':>', '=))', 'Vui', '((:', 'Zui', 'Cay', 'D·ªói'].some(i => event.body ? event.body.includes(i) : '')) return api.setMessageReaction('üòÜ', event.messageID, false, true);
        if (['Oh', 'ƒê√π', 'Gh√™', 'Vip', 'Ch√™', 'D·ªØ', '√Å'].some(i => event.body ? event.body.includes(i) : '')) return api.setMessageReaction('üòÆ', event.messageID, false, true);
        if (['Ngon', 'Mlem', 'G√°i ngon', 'G√°i'].some(i => event.body ? event.body.includes(i) : '')) return api.setMessageReaction('ü§§', event.messageID, false, true);
        if (['Box', 'Nh√≥m', 'checktt', 'Top'].some(i => event.body ? event.body.includes(i) : '')) return api.setMessageReaction('ü§ì', event.messageID, false, true);
        if (['Cc', 'Cl', 'L·ªìn', 'C·∫∑c', 'Clm', 'Clmm', 'S·ª£', 'Lol', 'Ngu', 'Ncc', 'Ncl', 'Non', 'G√†'].some(i => event.body ? event.body.includes(i) : '')) return api.setMessageReaction('üòπ', event.messageID, false, true);
        if (['Y√™u', 'Th∆∞n', 'Th∆∞∆°ng', 'Hun', 'H√¥n'].some(i => event.body ? event.body.includes(i) : '')) return api.setMessageReaction('‚ù§Ô∏è', event.messageID, false, true);
        if (['Kh√≥c', 'Bu·ªìn', 'B√πn', 'Ch√°n', ':((', ':<', 'üò≠', 'üò¢', ')):', 'Haiz', 'Ngh√®o', 'Huhu'].some(i => event.body ? event.body.includes(i) : '')) return api.setMessageReaction('üò¢', event.messageID, false, true);
        if (['Mn', 'Alo', 'H√∫', '√ä', 'B√°o'].some(i => event.body ? event.body.includes(i) : '')) return api.setMessageReaction('ü§î', event.messageID, false, true);
        if (['L√™u', 'Jztr', 'G√¨',].some(i => event.body ? event.body.includes(i) : '')) return api.setMessageReaction('üòõ', event.messageID, false, true);
        if (['B·ªßh', 'ping', 'Thi·ªÉu nƒÉng', 'Lmao', 'D·∫£k', 'H·ªÅ', ':v'].some(i => event.body ? event.body.includes(i) : '')) return api.setMessageReaction('ü§°', event.messageID, false, true);
        if (['Hello', 'Hi', 'Ch√†o', 'H√π', 'Xin ch√†o', '‚úåÔ∏è', 'H√≠'].some(i => event.body ? event.body.includes(i) : '')) return api.setMessageReaction('üñï', event.messageID, false, true);
        if (['Bye', 'Pp', 'T·∫°m bi·ªát', 'Off'].some(i => event.body ? event.body.includes(i) : '')) return api.setMessageReaction('üëã', event.messageID, false, true);
        if (['Ng·ªß', 'Ng·ªß ngon', 'ƒêi ng·ªß'].some(i => event.body ? event.body.includes(i) : '')) return api.setMessageReaction('üò¥', event.messageID, false, true);
        if (['üòè', 'Ch·∫£nh', 'Nh·∫øch', 'Tu·ªïi', '-.-'].some(i => event.body ? event.body.includes(i) : '')) return api.setMessageReaction('üòº', event.messageID, false, true);
    }, 15000);
}

export async function onMessage({ event, message, getText, Threads }) {
    let { data } = (await Threads.getData(event.threadID)) || {};
    if (typeof data["autoReaction"] == "undefined" || data["autoReaction"] == true) data["autoReaction"] = false;
    else data["autoReaction"] = true;
    await Threads.setData(event.threadID, { data });
    return message.send(`${(data["autoReaction"] == false) ? getText("off") : getText("on")} ${getText("successText")}`);
}
